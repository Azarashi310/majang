!function(t){function n(e){if(i[e])return i[e].exports;var s=i[e]={exports:{},id:e,loaded:!1};return t[e].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}var i={};return n.m=t,n.c=i,n.p="./dist/",n(0)}([function(t,n,i){var e,s,r,o,c;c=i(1),o=i(2),s=i(3),e=i(4),r=i(5),$(function(){var t,n,i;return this.name="",this.socket,n=new s,t=new e,i=new r,$("#input .submit").on("click",this,function(e){var s,r;if(s=e.data,s.name=n.nameInputProcess($("#input .value")),""!==s.name)return t.changeClass("top"),s.socket=i.init("http://localhost:3000",s.name),console.log(s.socket),r=new c(s.socket,$("#util .userlist")),r.init()}),{game:function(){var t;return t=new o($("#trump .mycards"),$("#trump .enemycards"),socket),t.init()},message:function(){}}})},function(t,n){var i;i=function(){function t(t,n){this.socket=t,this.clientList,this.userlist=n}return t.prototype.init=function(){var t;return t=this,this.socket.on("clientList",function(n){return t.clientList=n,t.setLists()})},t.prototype.setLists=function(){var t;return t=this,this.$list,$.each(this.clientList,function(n,i){return this.$list=$('<li class="user">').text(i),t.userlist.append(this.$list)})},t}(),t.exports=i},function(t,n){var i;i=function(){function t(t,n,i){this.cards=t,this.enemyCards=n,this.myCards=[],this.initCard=5,this.socket=i}return t.prototype.init=function(){var t;return t=this,this.socket.on("deal",function(n){return console.log(n),t.myCards.push(n)}),this.socket.emit("feed",5),this.socket.on("create",function(){return $.each(t.myCards,function(n,i){var e,s,r,o;return o=i[1],r=i[0],e=$('<li class="card">'),s=$('<li class="card enemy">'),e.attr("data-kind",r).attr("data-num",o),t.enemyCards.append(s),t.cards.append(e)})})},t}(),t.exports=i},function(t,n){var i;i=function(){function t(){}return t.prototype.init=function(){},t.prototype.nameInputProcess=function(t){return this.name=$(t).val(),this.name.length<1?(alert("名前を入力してください"),""):(alert("ようこそ "+this.name+" さん"),this.name)},t}(),t.exports=i},function(t,n){var i;i=function(){function t(){this.target=$("html")}return t.prototype.init=function(){},t.prototype.changeClass=function(t){if(!this.target.hasClass(t))return this.target.class=t},t}(),t.exports=i},function(t,n){var i;i=function(){function t(t,n){this.url=t,this.name=n,this.socket}return t.prototype.init=function(){return this.socket=io.connect(this.url,this.name),this.socket},t}(),t.exports=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,